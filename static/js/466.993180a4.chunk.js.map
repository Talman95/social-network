{"version":3,"file":"static/js/466.993180a4.chunk.js","mappings":"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","sources":["api/chat/index.ts","store/middlewares/chat/thunks.ts","store/actions/chatActions.ts","store/selectors/chatSelectors.ts","pages/Chat/AddMessageBox/AddMessageBox.tsx","pages/Chat/ChatWindow/ChatHeader/ChatHeader.tsx","../node_modules/@mui/material/esm/ListItemAvatar/listItemAvatarClasses.js","../node_modules/@mui/material/esm/ListItemAvatar/ListItemAvatar.js","pages/Chat/ChatWindow/Messages/MessageItem/MessageItem.tsx","pages/Chat/ChatWindow/Messages/Messages.tsx","pages/Chat/ChatWindow/ChatWindow.tsx","pages/Chat/Chat.tsx"],"sourcesContent":["import { chatStatus } from '../../enums/chatStatus';\n\nimport { MessagesReceivedSubscriberType, StatusChangedSubscriberType } from './types';\n\nconst subscribers = {\n  'messages-received': [] as MessagesReceivedSubscriberType[],\n  'status-changed': [] as StatusChangedSubscriberType[],\n};\n\ntype EventsNamesType = 'messages-received' | 'status-changed';\n\nlet ws: WebSocket | null = null;\n\nconst time = 3000;\n\nconst closeHandler = (): void => {\n  setTimeout(() => {\n    ws?.addEventListener('close', closeHandler);\n    ws?.close();\n\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\n    ws.addEventListener('close', closeHandler);\n  }, time);\n};\n\nconst handleMessage = (e: MessageEvent): void => {\n  const newMessages = JSON.parse(e.data);\n\n  subscribers['messages-received'].forEach(subscriber => subscriber(newMessages));\n};\n\nconst notifySubscribersAboutStatus = (status: chatStatus): void => {\n  subscribers['status-changed'].forEach(subscriber => subscriber(status));\n};\n\nconst handleOpen = (): void => {\n  notifySubscribersAboutStatus(chatStatus.READY);\n};\n\nconst handleError = (): void => {\n  notifySubscribersAboutStatus(chatStatus.ERROR);\n  console.log('REFRESH PAGE');\n};\n\nconst cleanUp = (): void => {\n  ws?.removeEventListener('close', closeHandler);\n  ws?.removeEventListener('message', handleMessage);\n  ws?.removeEventListener('open', handleOpen);\n  ws?.removeEventListener('error', handleError);\n};\n\nfunction createChannel(): void {\n  cleanUp();\n\n  ws?.close();\n\n  ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\n  notifySubscribersAboutStatus(chatStatus.PENDING);\n  ws.addEventListener('close', closeHandler);\n  ws.addEventListener('message', handleMessage);\n  ws.addEventListener('open', handleOpen);\n  ws.addEventListener('error', handleError);\n}\n\nexport const chatAPI = {\n  start: () => {\n    createChannel();\n  },\n\n  stop: () => {\n    subscribers['messages-received'] = [];\n    subscribers['status-changed'] = [];\n\n    cleanUp();\n    ws?.close();\n  },\n\n  subscribe: (\n    eventName: EventsNamesType,\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType,\n  ) => {\n    // @ts-ignore\n    subscribers[eventName].push(callback);\n\n    return () => {\n      // @ts-ignore\n      subscribers[eventName] = subscribers[eventName].filter(s => s !== callback);\n    };\n  },\n\n  unsubscribe: (\n    eventName: EventsNamesType,\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType,\n  ) => {\n    // @ts-ignore\n    subscribers[eventName] = subscribers[eventName].filter(s => s !== callback);\n  },\n\n  sendMessage: (message: string) => {\n    ws?.send(message);\n  },\n};\n","import { Dispatch } from 'redux';\n\nimport { chatAPI } from '../../../api/chat';\nimport { ChatMessageApiType } from '../../../api/chat/types';\nimport { chatStatus } from '../../../enums/chatStatus';\nimport {\n  clearMessages,\n  messagesReceived,\n  statusChanged,\n} from '../../actions/chatActions';\nimport { AppThunk } from '../../store';\n\nlet newMessageHandlerMemoized: ((messages: ChatMessageApiType[]) => void) | null = null;\n\nconst newMessageHandler = (\n  dispatch: Dispatch,\n): ((messages: ChatMessageApiType[]) => void) | null => {\n  if (newMessageHandlerMemoized === null) {\n    newMessageHandlerMemoized = messages => {\n      dispatch(messagesReceived(messages));\n    };\n  }\n\n  return newMessageHandlerMemoized;\n};\n\nlet statusChangedHandlerMemoized: ((status: chatStatus) => void) | null = null;\n\nconst statusChangedHandler = (\n  dispatch: Dispatch,\n): ((status: chatStatus) => void) | null => {\n  if (statusChangedHandlerMemoized === null) {\n    statusChangedHandlerMemoized = status => {\n      dispatch(statusChanged(status));\n    };\n  }\n\n  return statusChangedHandlerMemoized;\n};\n\nexport const startMessagesListening = (): AppThunk => dispatch => {\n  chatAPI.start();\n  // @ts-ignore\n  chatAPI.subscribe('messages-received', newMessageHandler(dispatch));\n  // @ts-ignore\n  chatAPI.subscribe('status-changed', statusChangedHandler(dispatch));\n};\n\nexport const stopMessagesListeningWorker = (): AppThunk => dispatch => {\n  // @ts-ignore\n  chatAPI.unsubscribe('messages-received', newMessageHandler(dispatch));\n  // @ts-ignore\n  chatAPI.unsubscribe('status-changed', statusChangedHandler(dispatch));\n  chatAPI.stop();\n  dispatch(clearMessages());\n};\n\nexport const sendMessage =\n  (message: string): AppThunk =>\n  () => {\n    chatAPI.sendMessage(message);\n  };\n","import { ChatMessageApiType } from '../../api/chat/types';\nimport { chatStatus } from '../../enums/chatStatus';\n\nimport { chatActionType } from './types/chatTypes';\n\nexport const messagesReceived = (messages: ChatMessageApiType[]) =>\n  ({\n    type: chatActionType.MESSAGES_RECEIVED,\n    payload: { messages },\n  } as const);\n\nexport const statusChanged = (status: chatStatus) =>\n  ({\n    type: chatActionType.STATUS_CHANGED,\n    payload: { status },\n  } as const);\n\nexport const clearMessages = () =>\n  ({\n    type: chatActionType.CLEAR_MESSAGES,\n  } as const);\n","import { chatStatus } from '../../enums/chatStatus';\nimport { ChatMessageType } from '../../types/ChatMessageType';\nimport { RootState } from '../store';\n\nexport const selectMessages = (state: RootState): ChatMessageType[] =>\n  state.chat.messages;\n\nexport const selectStatus = (state: RootState): chatStatus => state.chat.status;\n","import React, { ChangeEvent, FC, KeyboardEvent, useState } from 'react';\n\nimport { Button, Card, TextField } from '@mui/material';\nimport { useSelector } from 'react-redux';\n\nimport { chatStatus } from '../../../enums/chatStatus';\nimport { useAppDispatch } from '../../../hooks/useAppDispatch';\nimport { sendMessage } from '../../../store/middlewares/chat';\nimport { selectStatus } from '../../../store/selectors/chatSelectors';\n\nexport const AddMessageBox: FC = () => {\n  const dispatch = useAppDispatch();\n\n  const status = useSelector(selectStatus);\n\n  const [text, setText] = useState('');\n\n  const onTextChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    setText(e.currentTarget.value);\n  };\n\n  const onSendClick = (): void => {\n    const trimmedText = text.trim();\n\n    if (trimmedText === '') {\n      return;\n    }\n\n    dispatch(sendMessage(trimmedText));\n    setText('');\n  };\n\n  const onEnterPress = (e: KeyboardEvent<HTMLDivElement>): void => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      onSendClick();\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <Card sx={{ margin: 1, display: 'flex' }}>\n      <TextField\n        placeholder=\"Message...\"\n        multiline\n        rows={4}\n        value={text}\n        onChange={onTextChange}\n        onKeyPress={onEnterPress}\n        fullWidth\n      />\n      <Button\n        variant=\"contained\"\n        onClick={onSendClick}\n        disabled={status !== chatStatus.READY}\n      >\n        Send\n      </Button>\n    </Card>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { Box, Divider, Typography } from '@mui/material';\n\nexport const ChatHeader: FC = () => (\n  <Box>\n    <Typography\n      variant=\"h5\"\n      component=\"div\"\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        marginBottom: '16px',\n      }}\n    >\n      Developers Chat\n    </Typography>\n    <Divider />\n  </Box>\n);\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getListItemAvatarUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemAvatar', slot);\n}\nconst listItemAvatarClasses = generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);\nexport default listItemAvatarClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport ListContext from '../List/ListContext';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getListItemAvatarUtilityClass } from './listItemAvatarClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    alignItems,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']\n  };\n  return composeClasses(slots, getListItemAvatarUtilityClass, classes);\n};\n\nconst ListItemAvatarRoot = styled('div', {\n  name: 'MuiListItemAvatar',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];\n  }\n})(({\n  ownerState\n}) => _extends({\n  minWidth: 56,\n  flexShrink: 0\n}, ownerState.alignItems === 'flex-start' && {\n  marginTop: 8\n}));\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nconst ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiListItemAvatar'\n  });\n\n  const {\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const context = React.useContext(ListContext);\n\n  const ownerState = _extends({}, props, {\n    alignItems: context.alignItems\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListItemAvatarRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemAvatar.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `Avatar`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListItemAvatar;","import React, { FC, memo } from 'react';\n\nimport { Avatar, ListItem, ListItemAvatar, ListItemText } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\n\nimport { path } from '../../../../../enums/path';\nimport { ChatMessageType } from '../../../../../types/ChatMessageType';\n\nexport const MessageItem: FC<{ message: ChatMessageType }> = memo(({ message }) => {\n  const navigate = useNavigate();\n\n  const onUserAvatarClick = (): void => {\n    navigate(`${path.PROFILE}/${message.userId}`);\n  };\n\n  return (\n    <ListItem alignItems=\"flex-start\">\n      <ListItemAvatar>\n        <Avatar\n          alt={message.userName}\n          src={message.photo}\n          onClick={onUserAvatarClick}\n          style={{ cursor: 'pointer' }}\n        />\n      </ListItemAvatar>\n\n      <ListItemText\n        primary={message.userName}\n        secondary={message.message}\n        style={{ wordBreak: 'break-word' }}\n      />\n    </ListItem>\n  );\n});\n","import React, { FC, useEffect, useRef, useState } from 'react';\n\nimport { List } from '@mui/material';\nimport { useSelector } from 'react-redux';\n\nimport { selectMessages } from '../../../../store/selectors/chatSelectors';\n\nimport { MessageItem } from './MessageItem/MessageItem';\n\nexport const Messages: FC = () => {\n  const messages = useSelector(selectMessages);\n\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\n\n  const [autoScroll, setAutoScroll] = useState(true);\n\n  const onChatListScroll = (e: React.UIEvent): void => {\n    const element = e.currentTarget;\n    const scrollError = 300;\n\n    if (\n      Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) <\n      scrollError\n    ) {\n      if (!autoScroll) {\n        setAutoScroll(true);\n      }\n    } else if (autoScroll) {\n      setAutoScroll(false);\n    }\n  };\n\n  useEffect(() => {\n    if (autoScroll) {\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  return (\n    <List\n      sx={{\n        width: '100%',\n        bgcolor: 'background.paper',\n        height: '400px',\n        overflowY: 'auto',\n      }}\n      onScroll={onChatListScroll}\n    >\n      {messages.map(message => (\n        <MessageItem key={message.id} message={message} />\n      ))}\n      <div ref={messagesAnchorRef} />\n    </List>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { Card } from '@mui/material';\nimport { useSelector } from 'react-redux';\n\nimport { chatStatus } from '../../../enums/chatStatus';\nimport { selectStatus } from '../../../store/selectors/chatSelectors';\n\nimport { ChatHeader } from './ChatHeader/ChatHeader';\nimport { Messages } from './Messages/Messages';\n\nexport const ChatWindow: FC = () => {\n  const status = useSelector(selectStatus);\n\n  return (\n    <Card sx={{ margin: 1, padding: { sm: 2 } }}>\n      <ChatHeader />\n      {status === chatStatus.ERROR ? (\n        <div>Some error occurred. Please refresh the page</div>\n      ) : (\n        <Messages />\n      )}\n    </Card>\n  );\n};\n","import React, { FC, useEffect } from 'react';\n\nimport { Box } from '@mui/material';\n\nimport { useAppDispatch } from '../../hooks/useAppDispatch';\nimport {\n  startMessagesListening,\n  stopMessagesListeningWorker,\n} from '../../store/middlewares/chat';\n\nimport { AddMessageBox } from './AddMessageBox/AddMessageBox';\nimport { ChatWindow } from './ChatWindow/ChatWindow';\n\nconst Chat: FC = () => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(startMessagesListening());\n\n    return () => {\n      dispatch(stopMessagesListeningWorker());\n    };\n  }, []);\n\n  return (\n    <Box sx={{ height: '70vh' }}>\n      <ChatWindow />\n      <AddMessageBox />\n    </Box>\n  );\n};\n\nexport default Chat;\n"],"names":["subscribers","ws","closeHandler","setTimeout","addEventListener","close","WebSocket","handleMessage","e","newMessages","JSON","parse","data","forEach","subscriber","notifySubscribersAboutStatus","status","handleOpen","chatStatus","handleError","console","log","cleanUp","removeEventListener","chatAPI","createChannel","eventName","callback","push","filter","s","message","send","newMessageHandlerMemoized","newMessageHandler","dispatch","messages","type","chatActionType","payload","messagesReceived","statusChangedHandlerMemoized","statusChangedHandler","statusChanged","stopMessagesListeningWorker","selectMessages","state","chat","selectStatus","AddMessageBox","useAppDispatch","useSelector","useState","text","setText","onSendClick","trimmedText","trim","Card","sx","margin","display","TextField","placeholder","multiline","rows","value","onChange","currentTarget","onKeyPress","key","shiftKey","preventDefault","fullWidth","Button","variant","onClick","disabled","ChatHeader","Box","Typography","component","justifyContent","marginBottom","Divider","getListItemAvatarUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ListItemAvatarRoot","styled","name","overridesResolver","props","styles","ownerState","root","alignItems","alignItemsFlexStart","_extends","minWidth","flexShrink","marginTop","React","inProps","ref","useThemeProps","className","other","_objectWithoutPropertiesLoose","context","ListContext","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","MessageItem","memo","navigate","useNavigate","ListItem","Avatar","alt","userName","src","photo","path","userId","style","cursor","ListItemText","primary","secondary","wordBreak","Messages","messagesAnchorRef","useRef","autoScroll","setAutoScroll","useEffect","current","scrollIntoView","behavior","List","width","bgcolor","height","overflowY","onScroll","element","Math","abs","scrollHeight","scrollTop","clientHeight","map","id","ChatWindow","padding","sm"],"sourceRoot":""}