{"version":3,"file":"static/js/147.1d4f9c83.chunk.js","mappings":"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","sources":["constants/contacts.ts","pages/Settings/Contact/Contact.tsx","pages/Settings/Settings.tsx"],"sourcesContent":["export const contacts = [\n  { title: 'GitHub', formikName: 'contacts.github', value: 'github' },\n  { title: 'VK', formikName: 'contacts.vk', value: 'vk' },\n  { title: 'Facebook', formikName: 'contacts.facebook', value: 'facebook' },\n  { title: 'Instagram', formikName: 'contacts.instagram', value: 'instagram' },\n  { title: 'Twitter', formikName: 'contacts.twitter', value: 'twitter' },\n  { title: 'Website', formikName: 'contacts.website', value: 'website' },\n  { title: 'YouTube', formikName: 'contacts.youtube', value: 'youtube' },\n  { title: 'MainLink', formikName: 'contacts.mainLink', value: 'mainLink' },\n];\n","import React, { ChangeEvent, FC, memo } from 'react';\n\nimport { Grid, TextField, Typography } from '@mui/material';\n\ntype PropsType = {\n  title: string;\n  name: string;\n  onChange: (e: ChangeEvent<any>) => void;\n  value: string;\n};\n\nexport const Contact: FC<PropsType> = memo(({ title, name, onChange, value }) => (\n  <>\n    <Grid item xs={6} sx={{ display: 'flex', justifyContent: 'center' }}>\n      <Typography variant=\"subtitle1\" color=\"text.secondary\" component=\"div\">\n        {title}\n      </Typography>\n    </Grid>\n    <Grid item xs={6}>\n      <TextField\n        id={title}\n        variant=\"standard\"\n        fullWidth\n        name={name}\n        onChange={onChange}\n        value={value}\n      />\n    </Grid>\n  </>\n));\n","import React, { FC } from 'react';\n\nimport {\n  Box,\n  Button,\n  Card,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { useFormik } from 'formik';\nimport { useSelector } from 'react-redux';\nimport * as Yup from 'yup';\n\nimport { contacts } from '../../constants/contacts';\nimport { useAppDispatch } from '../../hooks/useAppDispatch';\nimport { updateProfile } from '../../store/middlewares/profile';\nimport { UpdateProfileModel } from '../../store/reducers/profileReducer';\nimport { selectAuthUser } from '../../store/selectors/authSelectors';\nimport { ContactsType } from '../../types/ProfileType';\n\nimport { Contact } from './Contact/Contact';\n\nconst Settings: FC = () => {\n  const dispatch = useAppDispatch();\n\n  const profile = useSelector(selectAuthUser);\n\n  const validationSchema = Yup.object({\n    fullName: Yup.string().required('Name is required'),\n  });\n\n  const onFormSubmit = (values: UpdateProfileModel): void => {\n    dispatch(updateProfile(values));\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      aboutMe: profile?.aboutMe || '',\n      contacts: {\n        facebook: profile?.contacts.facebook || '',\n        website: profile?.contacts.website || '',\n        vk: profile?.contacts.vk || '',\n        twitter: profile?.contacts.twitter || '',\n        instagram: profile?.contacts.instagram || '',\n        youtube: profile?.contacts.youtube || '',\n        github: profile?.contacts.github || '',\n        mainLink: profile?.contacts.mainLink || '',\n      },\n      lookingForAJob: profile?.lookingForAJob || false,\n      lookingForAJobDescription: profile?.lookingForAJobDescription || '',\n      fullName: profile?.fullName || '',\n    },\n    validationSchema,\n    onSubmit: onFormSubmit,\n  });\n\n  return (\n    <Card>\n      <Box p={4}>\n        <FormControl>\n          <form onSubmit={formik.handleSubmit}>\n            <FormGroup>\n              <Typography variant=\"h5\">Main</Typography>\n\n              <Grid container spacing={2}>\n                <Grid item xs={6} sx={{ display: 'flex', justifyContent: 'center' }}>\n                  <Typography variant=\"subtitle1\" color=\"text.secondary\" component=\"div\">\n                    Name\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <TextField\n                    id=\"standard-basic\"\n                    variant=\"standard\"\n                    fullWidth\n                    {...formik.getFieldProps('fullName')}\n                    error={formik.touched.fullName && Boolean(formik.errors.fullName)}\n                    helperText={formik.touched.fullName && formik.errors.fullName}\n                  />\n                </Grid>\n\n                <Grid item xs={6} sx={{ display: 'flex', justifyContent: 'center' }}>\n                  <Typography variant=\"subtitle1\" color=\"text.secondary\" component=\"div\">\n                    About me\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <TextField\n                    id=\"standard-basic\"\n                    variant=\"standard\"\n                    fullWidth\n                    {...formik.getFieldProps('aboutMe')}\n                  />\n                </Grid>\n\n                <Grid item xs={6} sx={{ display: 'flex', justifyContent: 'center' }}>\n                  <Typography variant=\"subtitle1\" color=\"text.secondary\" component=\"div\">\n                    Looking for a job?\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={formik.values.lookingForAJob}\n                        onChange={formik.handleChange}\n                        name=\"lookingForAJob\"\n                      />\n                    }\n                    label=\"Looking for a job?\"\n                    name=\"lookingForAJob\"\n                    id=\"lookingForAJob\"\n                  />\n                </Grid>\n\n                <Grid item xs={6} sx={{ display: 'flex', justifyContent: 'center' }}>\n                  <Typography variant=\"subtitle1\" color=\"text.secondary\" component=\"div\">\n                    Description\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <TextField\n                    id=\"outlined-multiline-static\"\n                    multiline\n                    fullWidth\n                    rows={4}\n                    {...formik.getFieldProps('lookingForAJobDescription')}\n                  />\n                </Grid>\n              </Grid>\n\n              <Typography variant=\"h5\">Contacts</Typography>\n\n              <Grid container spacing={2}>\n                {contacts.map(({ title, formikName, value }) => (\n                  <Contact\n                    key={title}\n                    title={title}\n                    name={formikName}\n                    onChange={formik.handleChange}\n                    value={formik.values.contacts[value as keyof ContactsType]}\n                  />\n                ))}\n              </Grid>\n\n              <Grid item xs={12}>\n                <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n                  Save\n                </Button>\n              </Grid>\n            </FormGroup>\n          </form>\n        </FormControl>\n      </Box>\n    </Card>\n  );\n};\n\nexport default Settings;\n"],"names":["contacts","title","formikName","value","Contact","memo","name","onChange","Grid","item","xs","sx","display","justifyContent","Typography","variant","color","component","TextField","id","fullWidth","dispatch","useAppDispatch","profile","useSelector","selectAuthUser","validationSchema","Yup","fullName","required","formik","useFormik","initialValues","aboutMe","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","onSubmit","values","updateProfile","Card","Box","p","FormControl","handleSubmit","FormGroup","container","spacing","getFieldProps","error","touched","Boolean","errors","helperText","FormControlLabel","control","Checkbox","checked","handleChange","label","multiline","rows","map","Button","type"],"sourceRoot":""}