{"version":3,"file":"static/js/919.076ec74d.chunk.js","mappings":"+UA6HA,UAtGkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,KAEXC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IAEzBC,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KAAaC,MAAM,yBAAyBC,SAAS,qBAC5DC,SAAUH,EAAAA,KAAaE,SAAS,0BAG5BE,EAAY,yCAAG,WAAOC,GAA4B,sEACtDX,GAASY,EAAAA,EAAAA,IAAMD,IAAS,2CACzB,gBAFiB,sCAIZE,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbR,MAAO,GACPE,SAAU,GACVO,YAAY,EACZC,QAAS,IAEXZ,iBAAAA,EACAa,SAAUR,IAGZ,OAAIG,EAAOM,cACF,SAAC,IAAS,KAIjB,SAAC,KAAI,CAACC,WAAS,EAACC,eAAe,SAAQ,UACrC,SAAC,KAAI,CAACC,MAAI,EAACD,eAAe,SAAQ,UAChC,iBAAMH,SAAUL,EAAOU,aAAa,UAClC,UAAC,IAAW,YACV,UAAC,IAAS,YACR,qDAEE,eACEC,KAAK,wCACLC,OAAO,SACPC,IAAI,aAAY,UAEf,IAAG,cAIR,oEACA,sDACA,8CAGF,UAAC,IAAS,YACR,SAAC,KAAS,gBACRC,GAAG,QACHC,MAAM,QACNC,KAAK,QACLC,OAAO,UACHjB,EAAOkB,cAAc,UAAQ,IACjCC,MAAOnB,EAAOoB,QAAQ1B,OAAS2B,QAAQrB,EAAOsB,OAAO5B,OACrD6B,WAAYvB,EAAOoB,QAAQ1B,OAASM,EAAOsB,OAAO5B,UAGpD,SAAC,KAAS,gBACRoB,GAAG,WACHC,MAAM,WACNC,KAAK,WACLC,OAAO,UACHjB,EAAOkB,cAAc,aAAW,IACpCC,MAAOnB,EAAOoB,QAAQ1B,OAAS2B,QAAQrB,EAAOsB,OAAO5B,OACrD6B,WAAYvB,EAAOoB,QAAQ1B,OAASM,EAAOsB,OAAO5B,UAGpD,SAAC,IAAgB,CACfqB,MAAM,eACNS,SAAS,SAAC,KAAQ,UAAKxB,EAAOkB,cAAc,kBAG7C7B,IACC,UAAC,IAAG,CACFoC,GAAI,CAAEC,QAAS,OAAQC,cAAe,SAAUC,aAAc,QAAS,WAEvE,gBAAKC,IAAI,UAAUC,IAAKzC,KACxB,SAAC,KAAS,QACRyB,GAAG,UACHE,KAAK,UACLC,OAAO,UACHjB,EAAOkB,cAAc,iBAK/B,SAAC,IAAM,CAACa,MAAM,UAAUC,QAAQ,YAAYhB,KAAK,SAAQ,gCASvE,C","sources":["pages/Login/Login.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport {\n  Box,\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  TextField,\n} from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport { useFormik } from 'formik';\nimport { useSelector } from 'react-redux';\nimport * as Yup from 'yup';\n\nimport { loginValuesFormModel } from '../../api/auth/types';\nimport { Preloader } from '../../components/common/Preloader/Preloader';\nimport { useAppDispatch } from '../../hooks/useAppDispatch';\nimport { login } from '../../store/middlewares/auth';\nimport { selectCaptchaUrl } from '../../store/selectors/authSelectors';\n\nconst Login: FC = () => {\n  const dispatch = useAppDispatch();\n\n  const captchaUrl = useSelector(selectCaptchaUrl);\n\n  const validationSchema = Yup.object({\n    email: Yup.string().email('Invalid email address').required('Email is required'),\n    password: Yup.string().required('Password is required'),\n  });\n\n  const onFormSubmit = async (values: loginValuesFormModel): Promise<any> => {\n    dispatch(login(values));\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: true,\n      captcha: '',\n    },\n    validationSchema,\n    onSubmit: onFormSubmit,\n  });\n\n  if (formik.isSubmitting) {\n    return <Preloader />;\n  }\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid item justifyContent=\"center\">\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                To log in get registered\n                <a\n                  href=\"https://social-network.samuraijs.com/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {' '}\n                  here\n                </a>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p>Email: free@samuraijs.com</p>\n              <p>Password: free</p>\n            </FormLabel>\n\n            <FormGroup>\n              <TextField\n                id=\"email\"\n                label=\"Email\"\n                type=\"email\"\n                margin=\"normal\"\n                {...formik.getFieldProps('email')}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n              />\n\n              <TextField\n                id=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                margin=\"normal\"\n                {...formik.getFieldProps('password')}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n              />\n\n              <FormControlLabel\n                label=\"Remember me?\"\n                control={<Checkbox {...formik.getFieldProps('rememberMe')} />}\n              />\n\n              {captchaUrl && (\n                <Box\n                  sx={{ display: 'flex', flexDirection: 'column', marginBottom: '50px' }}\n                >\n                  <img alt=\"captcha\" src={captchaUrl} />\n                  <TextField\n                    id=\"captcha\"\n                    type=\"captcha\"\n                    margin=\"normal\"\n                    {...formik.getFieldProps('captcha')}\n                  />\n                </Box>\n              )}\n\n              <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n                Sign In\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Login;\n"],"names":["dispatch","useAppDispatch","captchaUrl","useSelector","selectCaptchaUrl","validationSchema","Yup","email","required","password","onFormSubmit","values","login","formik","useFormik","initialValues","rememberMe","captcha","onSubmit","isSubmitting","container","justifyContent","item","handleSubmit","href","target","rel","id","label","type","margin","getFieldProps","error","touched","Boolean","errors","helperText","control","sx","display","flexDirection","marginBottom","alt","src","color","variant"],"sourceRoot":""}